#BlueJ class context
comment0.target=PolyCalc
comment1.params=s
comment1.target=Token\ readString(java.lang.String)
comment1.text=\r\n\ Utilizes\ read,\ toPostfix\ and\ evaluate\r\n\ \r\n\ @param\ String\ The\ string\ to\ be\ read\r\n\ @return\ Token\ (Polynomial)\ that\ is\ evaluated\r\n
comment10.params=
comment10.target=void\ startUp()
comment10.text=\r\n\ Home\ screen\r\n
comment11.params=
comment11.target=void\ help()
comment11.text=\r\n\ Displays\ help\ for\ polynomial\ calculator\ \r\n
comment12.params=
comment12.target=void\ interactiveMode()
comment12.text=\r\n\ Mode\ where\ users\ can\ manually\ input\ expressions,\ and\ through\ readString()\ they\ are\ evaluated\r\n\ Also\ allows\ for\ the\ storage\ of\ variables\ in\ the\ field\ memory\r\n
comment13.params=
comment13.target=void\ fileReaderMode()
comment13.text=\r\n\ Mode\ uses\ ReadFile\ class\ to\ read\ and\ evaluate\ a\ given\ file\r\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\r\n\ main\r\n
comment2.params=s
comment2.target=Token\ readStringGUI(java.lang.String)
comment2.text=\r\n\ Same\ as\ above\ method\ but\ for\ GUI.\ Does\ not\ println\ errors\r\n\ @param\ String\ input\ string\r\n\ @return\ Token\ (Polynomial)\ that\ is\ returned\ \r\n
comment3.params=
comment3.target=PolyCalc()
comment3.text=\r\n\ Constructor\ for\ a\ PolyCalc\r\n
comment4.params=c
comment4.target=boolean\ isOperator(char)
comment4.text=\r\n\ Checks\ if\ given\ char\ is\ a\ valid\ operator\r\n\ @param\ char\ character\ to\ be\ checked\r\n\ @return\ true\ if\ valid\ false\ if\ not\ \r\n
comment5.params=c
comment5.target=Token\ whatOperator(char)
comment5.text=\r\n\ Takes\ a\ char\ and\ turns\ it\ into\ the\ appropriate\ token\ (Calculation)\r\n\ @param\ char\ character\ to\ be\ evaluated\r\n\ @return\ Token\ (Calculation)\ of\ corresponding\ operator\ \r\n
comment6.params=base\ power
comment6.target=Polynomial\ makeMono(java.lang.String,\ java.lang.String)
comment6.text=\r\n\ Shortcut\ for\ turning\ strings\ into\ Polynomials\ of\ a\ single\ monomial\ length\r\n\ @param\ String\ base\ of\ monomial\r\n\ @param\ String\ power\ of\ monomial\r\n\ @return\ Polynomial\ of\ given\ base\ and\ power\r\n
comment7.params=input
comment7.target=boolean\ read(java.lang.String)
comment7.text=\r\n\ Here\ she\ is,\ the\ FSM.\ Takes\ in\ a\ string\ input,\ goes\ through\ char\ by\ char\r\n\ and\ places\ them\ in\ a\ list\ of\ tokens\ (field\ tokens)\r\n\ @param\ String\ input\ String\ to\ be\ checked\r\n\ @return\ boolean\ whether\ or\ not\ it\ is\ a\ valid\ expression\r\n
comment8.params=
comment8.target=boolean\ toPostfix()
comment8.text=\r\n\ Converts\ tokens\ to\ postfix\ form\r\n\ @return\ boolean\ whether\ or\ not\ it\ was\ successful\r\n
comment9.params=
comment9.target=boolean\ evaluate()
comment9.text=\r\n\ Evaluates\ postfix\ expression\ using\ a\ stack\ of\ operands\r\n\ @return\ boolean\ whether\ or\ not\ evaluation\ was\ successful\r\n
numComments=15
