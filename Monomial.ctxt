#BlueJ class context
comment0.target=Monomial
comment1.params=
comment1.target=int\ getPriority()
comment1.text=\r\n\ A\ monomial\ does\ not\ have\ priority.\ It\ is\ not\ an\ operator\r\n\ @return\ int\ 0\r\n
comment10.params=i
comment10.target=void\ setPower(int)
comment10.text=\r\n\ setter\ for\ power\r\n\ @param\ int\ value\ to\ set\ power\ as\ \r\n
comment11.params=o
comment11.target=int\ compareTo(java.lang.Object)
comment11.text=\r\n\ Monomial\ implements\ compareTo\ based\ on\ the\ monomial's\ power.\r\n\ This\ makes\ sorting\ a\ polynomial\ incredibly\ simple\r\n\ @param\ Object\ "Object"\ is\ a\ requirement\ for\ this\ interface.\ Assumed\ to\ be\ a\ monomial\r\n\ @return\ int\ -1\ if\ class\ monomial\ >\ parameter,\ 0\ if\ same,\ 1\ if\ class\ monomial\ <\ parameter\r\n
comment12.params=a
comment12.target=Monomial\ multiplyMonomial(Monomial)
comment12.text=\r\n\ multiplies\ two\ monomials\r\n\ @param\ Monomial\ monomial\ to\ multiply\ by\ class\ monomial\r\n\ @return\ Monomial\ result\ of\ operation\ \r\n
comment13.params=a
comment13.target=Monomial\ divideMonomial(Monomial)
comment13.text=\r\n\ divides\ class\ monomial\ by\ parameter\ monomial\r\n\ @param\ Monomial\ divisor\r\n\ return\ Monomial\ result\ of\ operation\ \r\n
comment14.params=
comment14.target=java.lang.String\ toStringAlone()
comment14.text=\r\n\ this\ is\ what\ I\ came\ up\ with\ to\ avoid\ a\ polynomial\ looking\ like\ "3x^2\ -\ -3x"\r\n\ if\ a\ monomial\ is\ on\ its\ own\ or\ first\ in\ a\ polynomial,\ it\ should\ have\ the\ negative\ sign\r\n\ otherwise\ the\ absolute\ power\ should\ be\ taken\ \r\n\ @return\ String\ representation\ of\ monomial\ on\ its\ own\ \r\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\r\n\ this\ is\ what\ polynomials\ will\ use\ after\ the\ first\ term\ \r\n\ @return\ String\ representation\ of\ monomials\ in\ a\ polynomial\r\n
comment2.params=
comment2.target=Monomial()
comment2.text=\r\n\ constructor\ \r\n
comment3.params=
comment3.target=Polynomial\ operate()
comment3.text=\r\n\ A\ monomial\ cannot\ operate.\ It\ is\ not\ an\ operator\ \r\n\ @return\ null\r\n
comment4.params=
comment4.target=boolean\ isOperator()
comment4.text=\r\n\ A\ monomial\ is\ not\ an\ operator\ \r\n\ @return\ false\ \r\n
comment5.params=
comment5.target=boolean\ isOperand()
comment5.text=\r\n\ A\ monomial\ is\ an\ operand\r\n\ @return\ true\r\n
comment6.params=base\ power
comment6.target=Monomial(double,\ int)
comment6.text=\r\n\ constructor\r\n\ @param\ double\ base\ of\ monomial\r\n\ @param\ int\ power\ of\ monomial\r\n
comment7.params=
comment7.target=double\ getBase()
comment7.text=\r\n\ getter\ for\ base\ field\r\n\ @return\ double\ value\ of\ base\r\n
comment8.params=
comment8.target=int\ getPower()
comment8.text=\r\n\ getter\ for\ power\ field\r\n\ @return\ int\ value\ of\ power\r\n
comment9.params=f
comment9.target=void\ setBase(double)
comment9.text=\r\n\ setter\ for\ base\r\n\ @param\ double\ value\ to\ set\ base\ as\ \r\n
numComments=16
